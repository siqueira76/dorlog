### **Descri√ß√£o da Funcionalidade: Infraestrutura Inicial e Autentica√ß√£o com Firebase**

Esta funcionalidade √© respons√°vel por configurar a base da aplica√ß√£o DorLog como uma Progressive Web App (PWA) responsiva, com foco em dispositivos m√≥veis e desktops, utilizando **React** e **TailwindCSS** (ou outro framework escolhido). Ap√≥s isso, ser√° feita a integra√ß√£o completa com o **Firebase**, incluindo autentica√ß√£o (`Auth`), banco de dados (`Firestore`), armazenamento de arquivos (`Storage`) e notifica√ß√µes (`FCM`). Al√©m disso, permite logout, e edi√ß√£o/consulta dos dados do usu√°rio logado.

### **Requisitos Funcionais**

- Configurar Firebase (Auth, Firestore, Storage)
- Implementar cadastro com email e senha
- Implementar login com email e senha
- Implementar login com conta Google `signInWithPopup`
- Implementar logout
- Consultar dados do usu√°rio autenticado
- Editar nome e senha do usu√°rio logado
- Salvar/atualizar dados do usu√°rio no Firestore:
    - `id(mesmo id fo firebase auth uid)`
    - `nome`
    - `email`
    - `provider`
### **Requisitos Funcionais Interface Base**

#### üåû **Modo Visual (Cor e Tema)**

- A aplica√ß√£o utilizar√° **apenas o modo claro (light mode)**.
- Os componentes devem usar **cores suaves, alto contraste e boa legibilidade**, com base em uma paleta com fundo claro (ex: `#F5F7FA`) e textos escuros.
- **N√£o implementar tema escuro**, nem l√≥gica de altern√¢ncia entre temas.

#### üì±üíª **Layout Unificado Mobile + Desktop**

- A interface ser√° **unificada para dispositivos m√≥veis e desktops**.
- Mesmo em resolu√ß√µes de desktop, a experi√™ncia ser√° **semelhante √† de um aplicativo mobile**, centralizando o conte√∫do e otimizando para toque e simplicidade.
- Elementos ter√£o **tamanhos grandes, acess√≠veis e espa√ßos generosos**.
- O layout deve se adaptar fluidamente √†s larguras de tela, mantendo a mesma hierarquia visual.

#### üß≠ **Navega√ß√£o Principal - Bottom Tabs**

A navega√ß√£o principal da aplica√ß√£o ser√° feita por **bottom navigation tabs fixas**, com **quatro abas** vis√≠veis **em todas as telas logadas**:

1. **Home** (√≠cone de casa)
2. **M√©dicos** (√≠cone de estetosc√≥pio ou usu√°rio m√©dico)
3. **Medicamentos** (√≠cone de p√≠lula ou frasco)
4. **Relat√≥rios** (√≠cone de gr√°fico ou relat√≥rio)

- Essa navega√ß√£o deve ser **posicionada na parte inferior da tela**, tanto em mobile quanto em desktop.
- Deve ser responsiva, com √≠cones bem espa√ßados e r√≥tulos de texto vis√≠veis.
#### üß± **Header Padr√£o Reutiliz√°vel**

Em todas as telas da aplica√ß√£o logada, haver√° um **header fixo no topo da tela**, com as seguintes caracter√≠sticas:

- **√çcone de menu (tr√™s linhas)** √† esquerda, que abre um **drawer lateral** com menus e configura√ß√µes do usu√°rio.
- O t√≠tulo da tela pode ser exibido no centro, com tipografia clara e hierarquia visual bem definida.
- O bot√£o de menu lateral abrir√° uma **navega√ß√£o do tipo drawer lateral**, com se√ß√µes como:
    
    - Perfil / Conta
    - Logout
    - Acesso aos relat√≥rios
    - [Outros menus futuros]
#### ‚ôªÔ∏è **Template Reutiliz√°vel de Layout**

- O **layout padr√£o de tela logada** deve ser constru√≠do com base nesse template fixo:
    
    - `Header` no topo com bot√£o de menu
    - `Conte√∫do principal` no centro da tela, com padding interno generoso
    - `Bottom navigation` fixo ao final da tela
- Esse **template ser√° reutilizado em todas as telas logadas** da aplica√ß√£o, mantendo **consist√™ncia e previsibilidade de navega√ß√£o**.

#### ‚úÖ **Outras Diretrizes Visuais Importantes**

- Tipografia limpa, moderna e acess√≠vel (ex: Inter, Roboto ou similar).
- Componentes com **cantos arredondados (border-radius bem vis√≠vel)**.
- Uso de `Card`, `Input`, `Button`, `Alert`, `Drawer`, `Modal`, e `Tab` respeitando a est√©tica suave e amig√°vel.
- √çcones devem vir de bibliotecas como **Lucide** ou **Material Icons**, com estilos coesos.

### **Restri√ß√µes de Seguran√ßa e Boas Pr√°ticas**

- Nunca salvar senhas diretamente em Firestore
- Sempre usar `env` para credenciais do Firebase (como `apiKey`, `projectId`)
- N√£o criar cole√ß√µes ou documentos que n√£o foram explicitamente descritos
- Proteger as rotas que dependem de autentica√ß√£o com verifica√ß√£o de token
- Utilizar regras do Firestore para garantir que usu√°rios s√≥ acessem seus pr√≥prios dados

### **Orienta√ß√µes de Desenvolvimento Padr√£o**

- Manter separa√ß√£o clara entre l√≥gica de autentica√ß√£o e UI
- Utilizar contexto (`AuthContext`) para centralizar estado do usu√°rio
- Implementar carregamento (`loading`) e tratamento de erros na interface
- Validar os campos de e-mail e senha no front-end antes de enviar


Eu quero criar uma parte aqui do prompt para falar sobre como a aplica√ß√£o ser√° desenvolvida em termos de UI, UX e tamb√©m do modo da aplica√ß√£o, o modo de cores. A aplica√ß√£o ter√° apenas o modo de cor claro, a aplica√ß√£o ser√° no modo light, e al√©m disso a aplica√ß√£o ter√° uma interface gr√°fica unificada entre a aplica√ß√£o mobile e a aplica√ß√£o desktop. Mesmo em uma aplica√ß√£o desktop, a experi√™ncia pode ser uma experi√™ncia similar √† de uma aplica√ß√£o mobile, que vai ter embaixo uma navega√ß√£o em abas, vai ser um bottom navigation usando quatro abas, a primeira aba √© da tela home, a segunda aba √© onde a gente vai colocar os medicos, e na terceira aba √© onde n√≥s teremos os medicamentos e a quarta temos os reports. Independente de ser mobile ou de ser desktop, essa navega√ß√£o vai aparecer embaixo, e na parte superior, onde n√≥s temos o header, e esse template deve ser reutilizado para todas as interfaces da nossa aplica√ß√£o, l√° em cima no header vai ter um bot√£o parecido com aquelas tr√™s listas, para abrir um drawer, uma navega√ß√£o na lateral para ter os menus de usu√°rio, logout, sele√ß√£o de e-books e coisas relacionadas √† nossa aplica√ß√£o, que ser√° fornecida no futuro. O importante nesse momento √© criar um prompt com todas as caracter√≠sticas de interface que n√≥s vamos precisar implementar nessa primeira vers√£o, o primeiro prompt que vai dar in√≠cio √† nossa aplica√ß√£o.