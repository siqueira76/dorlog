**Autentica√ß√£o com Verifica√ß√£o de Assinatura**

Ap√≥s o login, a aplica√ß√£o deve consultar a cole√ß√£o `assinaturas`, onde cada documento √© identificado pelo e-mail do usu√°rio autenticado, e verificar se a data da assinatura (`data`) √© v√°lida (ou seja, uma data passada).

Caso a assinatura esteja ativa, a interface do perfil do usu√°rio dever√° exibir uma **badge** indicando que ele √© assinante. Caso contr√°rio, dever√° exibir uma **badge de ‚ÄúN√£o Assinante‚Äù** e um bot√£o de **CTA** (call-to-action) para um link externo (por enquanto: `https://google.com.br`).

---

#### ‚úÖ **Requisitos Funcionais**

- Ap√≥s o login, consultar a cole√ß√£o `assinaturas` com a chave igual ao e-mail do usu√°rio logado.
- Verificar se o campo `data` no documento de assinatura √© anterior √† data atual (`timestamp < now()`).
- Adicionar ao usuario logado uma flag para informar se assinatura esta ou n√£o ativa.
- Exibir na tela de perfil:
    - Se for assinante: badge ‚ÄúAssinante Ativo‚Äù
    - Se **n√£o for assinante**:
        - badge ‚ÄúN√£o Assinante‚Äù
        - bot√£o com texto ‚ÄúAssinar Agora‚Äù com link para `https://google.com.br`

#### üîí **Restri√ß√µes de Seguran√ßa e Boas Pr√°ticas**

- N√£o modifique arquivos fora dos listados acima.
- N√£o crie nem modifique tabelas de banco de dados sem solicita√ß√£o expl√≠cita.
- N√£o apague ou sobrescreva dados sem instru√ß√£o clara.
- Toda vari√°vel sens√≠vel (como chaves de API, tokens ou URLs protegidas) deve ser armazenada em arquivos `.env` ou equivalente.
- Sempre perguntar antes de instalar bibliotecas externas ou adicionar depend√™ncias.
- Todas as opera√ß√µes que envolvam escrita ou leitura em banco de dados devem ser explicitamente solicitadas no prompt principal.
- Evitar comandos destrutivos ou irrevers√≠veis, como `DELETE`, exceto sob instru√ß√£o expl√≠cita.
- Assegure-se de n√£o expor dados sens√≠veis no frontend.

#### üìå **Orienta√ß√µes de Desenvolvimento Padr√£o**

- Usar nomes claros e sem√¢nticos para vari√°veis e fun√ß√µes.
- Dividir responsabilidades entre componentes (ex: l√≥gica de autentica√ß√£o separada da UI).
- Comentar trechos de l√≥gica complexa.
- Priorizar c√≥digo limpo, reutiliz√°vel e organizado.
- Validar entradas do usu√°rio sempre que aplic√°vel.
- Preferir fun√ß√µes puras e evitar efeitos colaterais n√£o controlados.
- Priorizar acessibilidade e compatibilidade responsiva na interface.
